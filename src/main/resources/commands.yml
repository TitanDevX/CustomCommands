# This is the main alias of the the command, it will determine what you type in chat to execute the command.
# in this example you type /CustomSimpleCommand to execute this custom command.
CustomSimpleCommand:
  # aliases, typing on of these in the chat will execute the command as well, optional.
  # in this example, typing /csimplecmd or /csc will execute this command.
  Aliases: ["csimplecmd", "csc"]

  # Only people with this permission node will be able to execute the command, optional.
  # NOTE: If you want this command accessible by every player, delete the Permission: option.
  Permission: "commands.simplecommand"

  # Description for your command, optional.
  Description: "Simple example command."

  # Each one of these will be executed upon command executions.
  # Use {player} for the command sender name.
  # {arg:<arg number starting from 0>} is a placerholder for given args (that you type in chat after the command).
  #
  # -----------  Command Tags (use these to choose by and/or for whom each command will be executed) ------------------------
  # !!New Code 'tags': [CONSOLE]: command will be excuted by console.
  # [ALL_ONLINE]: command will be executed BY every online player, variable '{oplayer} = other player we are executing the command by.
  # [ALL_ONLINE_CONSOLE]: command will be executed for every online player BY console,
  #   variable '{oplayer} = other player we are executing the command for.
  # [PLAYER]: command will be executed by the player.
  # [PLAYER_CERTAIN][<player name>]: executes command by a specific player. <player name> can be a variable (like '{arg:x}').
  #
  # ----------- Command Conditions -----------
  # Add [If:<conditions ids>] tag to use conditions.
  # So if and only if all conditions are true the command will be executed, the condition message will be ignored.
  # Conditions ids are taken from conditions in the CONDITIONS FILE. (conditions.yml).
  ExecuteCommands:
    - "eco give {player} 100"

  # Messages will be sent to sender as a reply.
  # Like execute commands, you can use {arg:<number} variable(s).
  # And {player} for player name.
  #
  # -----------  Message Tags -----------
  # Use [BROADCAST] Tag to make it broadcast message for all online player. using {oplayer} for the other player's (that is receiving the message) name.
  # Use [SEND_OTHER][<player>] Tag to make it sends the message to another player.
  ReplyMessages:
    - "&aThanks for executing this simple command!"
    - "[BROADCAST]&b{player} has executed my simple command!"
CustomAdvancedCommand:
  Aliases: ["cadvancedcmd","cac"]
  Permission: "commands.customadvancedcommand"
  Description: "My advanced command."

  # Cooldown for the command.
  # In this example, players will only be able to execcute this command every 10 seconds.
  # Example: 1y, 1mo, 1w, 1d, 1h, 1m, 1s
  # With the permission to bypass, the permission is <command id>.cooldown.bypass.
  Cooldown: 10s

  # How many times can a player use this command? set this to -1 for unlimited use.
  # Optional, the default value for this is -1 (unlimited).
  Uses: 2

  # Limit the use of this command per permission, overrides 'Uses' value if the player has one of the permissions.
  # Optional.
  UsesPerPermission:
    - "commands.customadvancedcommand.unlimiteduse:-1"

  # Those are the arguments which the player needs to specify after the command.
  # These will shown in command usage inside < and >.
  # Argument Suffix: makes the plugin apply certain checks on the argument, depending on the suffix type.
  # Suffixes: OnlinePlayer: checks if this given argument represents an online player name.
  # num: checks if the given arg is a valid number. (ex: 1, 2, 3, 4, 10000...etc...)
  # offlinePlayer: checks if the given arg represents an offline player (who joined the server before) name.
  # message: if you use this suffix it will take every arg after this arg as one arg. (Example arg: coolmessage:message).
  #
  # [!] NOTE:  Don't use the message suffix two times or the behaviour of the plugin will be unexpectable
  RequiredArgs: [ 'example player:OnlinePlayer' ]

  # Optiona args, will be shown in the usage message between [ and ] and is not required..
  # in this case: /examplecommand [example optional player]
  # You can also use suffixes here, like RequiredArgs.
  OptionalArgs: [ 'example optional player:OnlinePlayer' ]

  # Who can use commands, players, console or all!
  Who_Can_Use_Command: all





